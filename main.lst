CCS PCM C Compiler, Version 5.025, 5967               23-Oct-17 16:19

               Filename:   C:\Users\Dung Phan\Documents\timerTEST\main.lst

               ROM used:   187 words (2%)
                           Largest free fragment is 2048
               RAM used:   20 (5%) at main() level
                           21 (6%) worst case
               Stack used: 2 locations (0 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   09A
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.3
0018:  GOTO   01B
0019:  BTFSC  0B.0
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   043
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
002F:  MOVLW  2F
0030:  MOVWF  04
0031:  BCF    03.7
0032:  MOVF   00,W
0033:  BTFSC  03.2
0034:  GOTO   042
0035:  MOVLW  06
0036:  MOVWF  78
0037:  CLRF   77
0038:  DECFSZ 77,F
0039:  GOTO   038
003A:  DECFSZ 78,F
003B:  GOTO   037
003C:  MOVLW  7B
003D:  MOVWF  77
003E:  DECFSZ 77,F
003F:  GOTO   03E
0040:  DECFSZ 00,F
0041:  GOTO   035
0042:  RETURN
....................  
....................  
....................  
.................... #define BUT_1   input(PIN_B4) 
.................... #define BUT_2   input(PIN_B5) 
....................  
.................... int8 Q[]={0x7E,0xBD,0xDB,0xE7}; 
*
00A9:  MOVLW  7E
00AA:  BCF    03.5
00AB:  MOVWF  27
00AC:  MOVLW  BD
00AD:  MOVWF  28
00AE:  MOVLW  DB
00AF:  MOVWF  29
00B0:  MOVLW  E7
00B1:  MOVWF  2A
.................... int a=0,b=0,c=0,d=0; 
.................... #INT_RB 
.................... void interrupt() 
.................... { 
....................    while(1) 
....................    { 
....................    if(BUT_1==1) 
*
0043:  BSF    03.5
0044:  BSF    06.4
0045:  BCF    03.5
0046:  BTFSS  06.4
0047:  GOTO   06C
....................    { 
....................       a=1; 
0048:  MOVLW  01
0049:  MOVWF  2B
....................       while(BUT_1==1) 
004A:  BSF    03.5
004B:  BSF    06.4
004C:  BCF    03.5
004D:  BTFSS  06.4
004E:  GOTO   053
....................          {delay_ms(1);} 
004F:  MOVLW  01
0050:  MOVWF  2F
0051:  CALL   02F
0052:  GOTO   04A
....................       while(a==1) 
0053:  DECFSZ 2B,W
0054:  GOTO   06C
....................       { 
....................          OUTPUT_BIT(PIN_D5,1); 
0055:  BSF    08.5
0056:  BSF    03.5
0057:  BCF    08.5
....................           
....................          OUTPUT_BIT(PIN_D6,0); 
0058:  BCF    03.5
0059:  BCF    08.6
005A:  BSF    03.5
005B:  BCF    08.6
....................          if(BUT_2==1) 
005C:  BSF    06.5
005D:  BCF    03.5
005E:  BTFSS  06.5
005F:  GOTO   06B
....................             { 
....................                a=0; 
0060:  CLRF   2B
....................                break; 
0061:  GOTO   06C
....................                while(BUT_2==0) 
0062:  BSF    03.5
0063:  BSF    06.5
0064:  BCF    03.5
0065:  BTFSC  06.5
0066:  GOTO   06B
....................          {delay_ms(1);} 
0067:  MOVLW  01
0068:  MOVWF  2F
0069:  CALL   02F
006A:  GOTO   062
....................             } 
006B:  GOTO   053
....................       } 
....................    } 
....................    if(BUT_2==1) 
006C:  BSF    03.5
006D:  BSF    06.5
006E:  BCF    03.5
006F:  BTFSS  06.5
0070:  GOTO   095
....................    { 
....................       b=1; 
0071:  MOVLW  01
0072:  MOVWF  2C
....................       while(BUT_2==1) 
0073:  BSF    03.5
0074:  BSF    06.5
0075:  BCF    03.5
0076:  BTFSS  06.5
0077:  GOTO   07C
....................          {delay_ms(1);} 
0078:  MOVLW  01
0079:  MOVWF  2F
007A:  CALL   02F
007B:  GOTO   073
....................       while(b==1) 
007C:  DECFSZ 2C,W
007D:  GOTO   095
....................       { 
....................           
....................          OUTPUT_BIT(PIN_D5,0); 
007E:  BCF    08.5
007F:  BSF    03.5
0080:  BCF    08.5
....................           
....................          OUTPUT_BIT(PIN_D6,1); 
0081:  BCF    03.5
0082:  BSF    08.6
0083:  BSF    03.5
0084:  BCF    08.6
....................          if(BUT_1==0) 
0085:  BSF    06.4
0086:  BCF    03.5
0087:  BTFSC  06.4
0088:  GOTO   094
....................             { 
....................                b=0; 
0089:  CLRF   2C
....................                break; 
008A:  GOTO   095
....................                while(BUT_1==1) 
008B:  BSF    03.5
008C:  BSF    06.4
008D:  BCF    03.5
008E:  BTFSS  06.4
008F:  GOTO   094
....................          {delay_ms(1);} 
0090:  MOVLW  01
0091:  MOVWF  2F
0092:  CALL   02F
0093:  GOTO   08B
....................             } 
0094:  GOTO   07C
....................       } 
....................    } 
0095:  GOTO   043
0096:  BCF    0B.0
0097:  BCF    0A.3
0098:  BCF    0A.4
0099:  GOTO   01B
.................... }} 
....................  
.................... void main() 
009A:  MOVF   03,W
009B:  ANDLW  1F
009C:  MOVWF  03
009D:  CLRF   2B
009E:  CLRF   2C
009F:  CLRF   2D
00A0:  CLRF   2E
00A1:  BSF    03.5
00A2:  BSF    1F.0
00A3:  BSF    1F.1
00A4:  BSF    1F.2
00A5:  BCF    1F.3
00A6:  MOVLW  07
00A7:  MOVWF  1C
00A8:  BCF    03.7
.................... { 
....................    output_d(0x00); 
*
00B2:  BSF    03.5
00B3:  CLRF   08
00B4:  BCF    03.5
00B5:  CLRF   08
....................    clear_interrupt(INT_RB); 
00B6:  BCF    0B.0
....................    enable_interrupts(INT_RB); 
00B7:  BSF    0B.3
....................    enable_interrupts(GLOBAL);   
00B8:  MOVLW  C0
00B9:  IORWF  0B,F
.................... } 
00BA:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
